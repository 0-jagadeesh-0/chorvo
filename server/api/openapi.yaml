openapi: 3.0.3
info:
  title: Chorvo API
  description: |
    Chorvo Project Management Software API
    
    ## Overview
    This API provides endpoints for managing projects, teams, tasks, and user authentication in Chorvo.
    
    ## Authentication
    Most endpoints require authentication using JWT tokens. Include the token in the Authorization header:
    ```
    Authorization: Bearer your-jwt-token
    ```
  version: 1.0.0
  contact:
    name: Chorvo Support
    url: https://chorvo.com/support
    email: support@chorvo.com

servers:
  - url: http://localhost:8080
    description: Local Development
  - url: https://api.chorvo.com
    description: Production

tags:
  - name: Authentication
    description: User authentication and account management
  - name: Organizations
    description: Organization management endpoints
  - name: Teams
    description: Team management within organizations
  - name: Projects
    description: Project management endpoints
  - name: Tasks
    description: Task management endpoints

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from the login endpoint

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        status:
          type: string
          enum: [active, inactive, suspended]
          example: "active"
        isActive:
          type: boolean
          example: true
        emailVerifiedAt:
          type: string
          format: date-time
          nullable: true
        lastLoginAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          example: 400
        message:
          type: string
          example: "Invalid input provided"

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "strongP@ssw0rd"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          example: "strongP@ssw0rd"

    LoginResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    VerifyEmailRequest:
      type: object
      required:
        - email
        - code
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        code:
          type: string
          minLength: 6
          maxLength: 6
          example: "123456"

    ResendVerificationRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"

    ResetPasswordRequest:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
          example: "reset-token-123"
        newPassword:
          type: string
          format: password
          minLength: 8
          example: "newStrongP@ssw0rd"

paths:
  /api/v1/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with email verification
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and receive JWT token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Email not verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/auth/verify-email:
    post:
      tags:
        - Authentication
      summary: Verify email address
      description: Verify user's email address using the verification code
      operationId: verifyEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
      responses:
        '200':
          description: Email verified successfully
        '400':
          description: Invalid or expired verification code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/auth/resend-verification:
    post:
      tags:
        - Authentication
      summary: Resend verification code
      description: Request a new email verification code
      operationId: resendVerification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendVerificationRequest'
      responses:
        '200':
          description: Verification code sent successfully
        '400':
          description: Email already verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Request a password reset link via email
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Password reset email sent
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Reset password using the reset token
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 